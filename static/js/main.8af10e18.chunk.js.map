{"version":3,"sources":["reportWebVitals.js","utilities/utilities.js","features/cart/cartSlice.js","data.js","features/inventory/inventorySlice.js","features/inventory/Inventory.js","features/currencyFilter/CurrencyFilter.js","features/currencyFilter/currencyFilterSlice.js","features/cart/Cart.js","features/searchTerm/SearchTerm.js","features/searchTerm/searchTermSlice.js","app/App.js","app/store.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","calculatePrice","price","currency","getCurrencySymbol","currencyFilter","initialCart","inventoryData","name","img","currenciesData","initialInventory","Inventory","inventory","searchTerm","dispatch","useEffect","type","payload","length","filteredInventory","filter","item","toLowerCase","includes","id","map","inventoryItem","displayPrice","className","src","alt","toFixed","onClick","onClickHandler","CurrencyFilter","setCurrency","Cart","props","cart","cartElements","Object","keys","quantity","value","onChange","e","input","newQuantity","Number","changeItemQuantity","onInputChangeHandler","target","Array","_","index","createCartItem","total","totalUSD","forEach","itemName","calculateTotal","SearchTerm","userInput","placeholder","App","state","reducers","action","newItem","itemToUpdate","updatedItem","rootReducer","combineReducers","store","createStore","render","ReactDOM","basename","StrictMode","getState","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.8af10e18.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export function calculatePrice(price, currency) {\r\n  switch (currency) {\r\n    case 'EUR':\r\n      return price * 0.86;\r\n    case 'CAD':\r\n      return price * 1.33;\r\n    default:\r\n      return price;\r\n  }\r\n}\r\n\r\nexport function calculateTotal(cart, currency) {\r\n  let totalUSD = 0;\r\n  Object.keys(cart).forEach((itemName) => {\r\n    totalUSD += cart[itemName].price * cart[itemName].quantity;\r\n  });\r\n  return calculatePrice(totalUSD, currency).toFixed(2);\r\n}\r\n\r\nexport function getCurrencySymbol(currencyFilter) {\r\n  switch (currencyFilter) {\r\n    case 'USD':\r\n      return '$';\r\n    case 'EUR':\r\n      return 'â‚¬';\r\n    case 'CAD':\r\n      return '$';\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n","export const addItem = (itemToAdd) => {\r\n  return {\r\n    type: 'cart/addItem',\r\n    payload: itemToAdd,\r\n  };\r\n};\r\n\r\n// Create your changeItemQuantity action creator here.\r\nexport const changeItemQuantity = (name, newQuantity) => {\r\n  return {\r\n    type: 'cart/changeItemQuantity',\r\n    payload: {\r\n      name: name,\r\n      newQuantity: newQuantity,\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst initialCart = {};\r\nexport const cartReducer = (cart = initialCart, action) => {\r\n  switch (action.type) {\r\n    case 'cart/addItem': {\r\n      const { name, price } = action.payload;\r\n\r\n      // if the item already exists, increase the quantity by 1, otherwise set it to 1\r\n      const quantity = cart[name] ? cart[name].quantity + 1 : 1;\r\n      const newItem = { price, quantity };\r\n\r\n      // Add the new item to the cart (or replace it if it existed already)\r\n      return { \r\n        ...cart, \r\n        [name]: newItem \r\n      };\r\n    }\r\n    case 'cart/changeItemQuantity': {\r\n      const { name, newQuantity } = action.payload;\r\n      const itemToUpdate = cart[name];\r\n\r\n      // Create a copy of itemToUpdate and update the quantity prop.\r\n      const updatedItem = {...itemToUpdate, quantity: newQuantity}\r\n\r\n      // Return a copy of the cart with the updatedItem included.\r\n      return {\r\n        ...cart, \r\n        [name]: updatedItem\r\n      };\r\n    }\r\n    default: {\r\n      return cart;\r\n    }\r\n  }\r\n};","export const inventoryData = [\r\n  { name: 'Hello World Hat', price: 23.99, img: 'https://static-assets.codecademy.com/Courses/Learn-Redux/codecademy-store/hello-world-hat.jpg' },\r\n  { name: 'Learn From Home Joggers', price: 45.99, img: 'https://static-assets.codecademy.com/Courses/Learn-Redux/codecademy-store/sweatpants.jpg' },\r\n  { name: 'Java Tee', price: 17.99, img: 'https://static-assets.codecademy.com/Courses/Learn-Redux/codecademy-store/java-tee.jpg' },\r\n  { name: 'Python Tee', price: 17.99, img: 'https://static-assets.codecademy.com/Courses/Learn-Redux/codecademy-store/python-tee.jpg' },\r\n  { name: 'SQL Tee', price: 17.99, img: 'https://static-assets.codecademy.com/Courses/Learn-Redux/codecademy-store/sql-tee.jpg' },\r\n  { name: 'Hello World Hoodie', price: 49.99, img: 'https://static-assets.codecademy.com/Courses/Learn-Redux/codecademy-store/hoodie.jpg' },\r\n];\r\n\r\nexport const currenciesData = ['USD', 'EUR', 'CAD'];","import { inventoryData } from '../../data.js';\r\n\r\nexport const loadData = (data) => {\r\n  return {\r\n    type: 'inventory/loadData',\r\n    payload: inventoryData,\r\n  };\r\n};\r\n\r\nconst initialInventory = [];\r\nexport const inventoryReducer = (inventory = initialInventory, action) => {\r\n  switch (action.type) {\r\n    case 'inventory/loadData': {\r\n      return action.payload;\r\n    }\r\n    default: {\r\n      return inventory;\r\n    }\r\n  }\r\n};\r\n","import React, { useEffect } from 'react';\r\n\r\nimport {\r\n  calculatePrice,\r\n  getCurrencySymbol,\r\n} from '../../utilities/utilities.js';\r\nimport { addItem } from '../cart/cartSlice.js';\r\nimport { loadData } from './inventorySlice';\r\n\r\nexport const Inventory = ({ inventory, currencyFilter, searchTerm, dispatch }) => {\r\n  const onMount = () => {\r\n    dispatch(loadData());\r\n  };\r\n  useEffect(onMount, [dispatch]);\r\n\r\n  const onClickHandler = (inventoryItem) => {\r\n    dispatch(addItem(inventoryItem));\r\n  };\r\n\r\n  if (inventory.length === 0) {\r\n    return <p> Sorry, no products are currently available... </p>;\r\n  }\r\n\r\n  const filteredInventory = inventory.filter(item => item.name.toLowerCase().includes(searchTerm.toLowerCase()));\r\n\r\n  return <ul id=\"inventory-container\">{filteredInventory.map(createInventoryItem)}</ul>;\r\n\r\n  function createInventoryItem(inventoryItem) {\r\n    const { price, name, img } = inventoryItem;\r\n    const displayPrice = calculatePrice(price, currencyFilter);\r\n    return (\r\n      <li key={name} className=\"item\">\r\n        <img src={img} alt={''} />\r\n        <h3>{name}</h3>\r\n        <h3 className=\"price\">\r\n          {getCurrencySymbol(currencyFilter)}\r\n          {displayPrice.toFixed(2)} {currencyFilter}\r\n        </h3>\r\n        <button\r\n          onClick={() => onClickHandler(inventoryItem)}\r\n          className=\"add-to-cart-button\"\r\n        >\r\n          Add to Cart\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\r\n\r\nimport { currenciesData } from '../../data.js';\r\nimport { setCurrency } from './currencyFilterSlice.js';\r\n\r\nexport const CurrencyFilter = ({ currencyFilter, dispatch }) => {\r\n  const onClickHandler = (currency) => {\r\n    dispatch(setCurrency(currency));\r\n  };\r\n\r\n  return (\r\n    <div id=\"currency-filters-container\">\r\n      <h3>Choose a currency</h3>\r\n      {currenciesData.map(createCurrencyButton)}\r\n    </div>\r\n  );\r\n\r\n  function createCurrencyButton(currency) {\r\n    return (\r\n      <button\r\n        className={`currency-button ${\r\n          currencyFilter === currency && 'selected'\r\n        }`}\r\n        key={currency}\r\n        onClick={() => onClickHandler(currency)}\r\n      >\r\n        {currency}\r\n      </button>\r\n    );\r\n  }\r\n};\r\n","const initialCurrencyFilter = 'USD';\r\nexport const currencyFilterReducer = (\r\n  currencyFilter = initialCurrencyFilter,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case 'currencyFilter/setCurrency': {\r\n      return action.payload;\r\n    }\r\n    default: {\r\n      return currencyFilter;\r\n    }\r\n  }\r\n};\r\n\r\nexport const setCurrency = (currency) => {\r\n  return {\r\n    type: 'currencyFilter/setCurrency',\r\n    payload: currency,\r\n  };\r\n};\r\n","import React from 'react';\r\nimport {\r\n  calculateTotal,\r\n  getCurrencySymbol,\r\n} from '../../utilities/utilities';\r\n\r\n// Import the changeItemQuantity() action creator.\r\nimport { changeItemQuantity } from './cartSlice';\r\n\r\nexport const Cart = (props) => {\r\n  const { cart, currencyFilter, dispatch } = props;\r\n\r\n  const onInputChangeHandler = (name, input) => {\r\n    // If the user enters a bad value...\r\n    if (input === '') {\r\n      return;\r\n    }\r\n\r\n    // Otherwise, convert the input into a number and pass it along as the newQuantity.\r\n    const newQuantity = Number(input);\r\n\r\n    // Dispatch an action to change the quantity of the given name and quantity.\r\n    dispatch(changeItemQuantity(name, newQuantity));\r\n  };\r\n\r\n  // Use the cart and currencyFilter slices to render their data.\r\n  const cartElements = Object.keys(cart).map(item => createCartItem(item));\r\n  const total = calculateTotal(cart, currencyFilter);\r\n\r\n  return (\r\n    <div id=\"cart-container\">\r\n      <ul id=\"cart-items\">{cartElements}</ul>\r\n      <h3 className=\"total\">\r\n        Total{' '}\r\n        <span className=\"total-value\">\r\n          {getCurrencySymbol(currencyFilter)}{total} {currencyFilter}\r\n        </span>\r\n      </h3>\r\n    </div>\r\n  );\r\n\r\n  function createCartItem(name) {\r\n    const item = cart[name];\r\n\r\n    if (item.quantity === 0) {\r\n      return;\r\n    }\r\n\r\n    return (\r\n      <li key={name}>\r\n        <p>{name}</p>\r\n        <select\r\n          className=\"item-quantity\"\r\n          value={item.quantity}\r\n          onChange={(e) => {\r\n            onInputChangeHandler(name, e.target.value);\r\n          }}\r\n        >\r\n          {[...Array(100).keys()].map((_, index) => (\r\n            <option key={index} value={index}>\r\n              {index}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </li>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\r\nimport { setSearchTerm, clearSearchTerm } from './searchTermSlice.js';\r\n\r\nconst searchIconUrl =\r\n  'https://static-assets.codecademy.com/Courses/Learn-Redux/Recipes-App/icons/search.svg';\r\nconst clearIconUrl =\r\n  'https://static-assets.codecademy.com/Courses/Learn-Redux/Recipes-App/icons/clear.svg';\r\n\r\nexport const SearchTerm = (props) => {\r\n  const { searchTerm, dispatch } = props;\r\n\r\n  const onSearchTermChangeHandler = (e) => {\r\n    const userInput = e.target.value;\r\n    dispatch(setSearchTerm(userInput));\r\n  };\r\n\r\n  const onClearSearchTermHandler = () => {\r\n    dispatch(clearSearchTerm());\r\n  };\r\n\r\n  return (\r\n    <div id=\"search-container\">\r\n      <img id=\"search-icon\" alt=\"\" src={searchIconUrl} />\r\n      <input\r\n        id=\"search\"\r\n        type=\"text\"\r\n        value={searchTerm}\r\n        onChange={onSearchTermChangeHandler}\r\n        placeholder=\"Search products\"\r\n      />\r\n      {searchTerm.length > 0 && (\r\n        <button\r\n          onClick={onClearSearchTermHandler}\r\n          type=\"button\"\r\n          id=\"search-clear-button\"\r\n        >\r\n          <img src={clearIconUrl} alt=\"\" />\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","export const setSearchTerm = (term) => {\r\n  return {\r\n    type: 'searchTerm/setSearchTerm',\r\n    payload: term\r\n  }\r\n}\r\n\r\nexport const clearSearchTerm = () => {\r\n  return {\r\n    type: 'searchTerm/clearSearchTerm'\r\n  }\r\n}\r\n\r\nconst initialSearchTerm = \"\";\r\nexport const searchTermReducer = (searchTerm = initialSearchTerm, action) => {\r\n  switch(action.type){\r\n    case 'searchTerm/setSearchTerm':\r\n      return action.payload;\r\n    case 'searchTerm/clearSearchTerm':\r\n      return \"\";\r\n    default:\r\n      return searchTerm;\r\n  }\r\n}\r\n","import React from 'react';\n\nimport { Inventory } from '../features/inventory/Inventory';\nimport { CurrencyFilter } from '../features/currencyFilter/CurrencyFilter';\nimport { Cart } from '../features/cart/Cart';\nimport { SearchTerm } from '../features/searchTerm/SearchTerm';\n\n// Render the Cart component below <Inventory />\nexport const App = (props) => {\n\n  const { state, dispatch } = props;\n\n  return (\n    <div>\n      <SearchTerm\n        searchTerm={state.searchTerm}\n        dispatch={dispatch}\n      />\n\n      <CurrencyFilter\n        currencyFilter={state.currencyFilter}\n        dispatch={dispatch}\n      />\n\n      <Inventory\n        inventory={state.inventory}\n        currencyFilter={state.currencyFilter}\n        searchTerm={state.searchTerm}\n        dispatch={dispatch}\n      />\n\n      <Cart \n        cart={state.cart}\n        currencyFilter={state.currencyFilter}\n        dispatch={dispatch}\n      />\n\n    </div>\n  );\n};\n\n","// Import createStore and combineReducers here.\r\nimport { createStore, combineReducers } from 'redux';\r\n\r\n// Import the slice reducers here.\r\nimport { inventoryReducer } from '../features/inventory/inventorySlice';\r\nimport { cartReducer } from '../features/cart/cartSlice';\r\nimport { currencyFilterReducer } from '../features/currencyFilter/currencyFilterSlice';\r\nimport { searchTermReducer } from '../features/searchTerm/searchTermSlice';\r\n\r\n// Create and export the store here.\r\nconst reducers = {\r\n  inventory: inventoryReducer,\r\n  cart: cartReducer,\r\n  currencyFilter: currencyFilterReducer,\r\n  searchTerm: searchTermReducer\r\n}\r\n\r\nconst rootReducer = combineReducers(reducers);\r\nexport const store = createStore(rootReducer)","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { App } from './app/App.js';\n// Import the store here.\nimport { store } from './app/store';\n\n// Pass state and dispatch props to the <App /> component.\nconst render = () => {\n  ReactDOM.render(\n    <Router basename=\"/codecademy-redux-codecademy_store\">\n      <React.StrictMode>\n      <App \n        state={store.getState()}\n        dispatch={store.dispatch}\n      />\n      </React.StrictMode>\n    </Router>,\n    document.getElementById('app')\n  )\n};\nrender();\n\n// Subscribe render to the store.\nstore.subscribe(render);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}